{"version":3,"sources":["components/Notification.js","components/PlayAgain.js","components/Scoreboard.js","components/GameView.js","components/NameForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Notification","notification","Header","as","data-cy","style","height","marginBottom","PlayAgain","playAgain","leaveGame","Grid","verticalAlign","textAlign","Column","paddingTop","paddingBottom","Button","onClick","className","color","size","marginRight","Scoreboard","players","Table","basic","inverted","unstackable","Row","HeaderCell","Body","map","p","key","id","Cell","name","score","GameView","lostGame","clickGameButton","stackable","minHeight","columns","fontSize","width","autoFocus","paddingRight","NameForm","enterGame","setName","maxWidth","Form","onSubmit","Field","Input","type","value","onChange","event","target","required","fluid","Footer","Menu","fixed","secondary","backgroundColor","Container","Item","header","Icon","href","socket","io","App","useState","setPlayers","setNotification","user","setUser","setLostGame","useEffect","on","data","prize","toNextPrize","emit","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efc87574.chunk.js","sourcesContent":["import React from 'react'\nimport { Header } from 'semantic-ui-react'\n\nconst Notification = ({ notification }) => {\n  return (\n    <Header as='h3' data-cy='notification' style={{ height: '30px', marginBottom: '0.5em' }}>\n      {notification}\n    </Header>\n  )\n}\n\nexport default Notification\n","import React from 'react'\n\nimport { Grid, Header, Button } from 'semantic-ui-react'\n\nconst PlayAgain = ({ playAgain, leaveGame }) => {\n  return (\n    <Grid verticalAlign='middle' textAlign='center' style={{ height: 'calc(100vh - 50px)' }}>\n      <Grid.Column>\n        <Header as='h1' style={{ paddingTop: '1em' }}>\n          You lose!\n        </Header>\n        <Header as='h2' style={{ paddingBottom: '1em' }}>\n          Do you want to play again?\n        </Header>\n        <Button\n          onClick={playAgain}\n          className='yes-button'\n          color='green'\n          size='huge'\n          style={{ marginRight: '1em' }}>\n          Yes\n        </Button>\n        <Button onClick={leaveGame} className='no-button' color='red' size='huge'>\n          No\n        </Button>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default PlayAgain\n","import React from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst Scoreboard = ({ players }) => {\n  return (\n    <Table basic='very' inverted unstackable textAlign='center'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name</Table.HeaderCell>\n          <Table.HeaderCell>Score</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {players.map(p => (\n          <Table.Row key={p.id}>\n            <Table.Cell>{p.name}</Table.Cell>\n            <Table.Cell data-cy='score'>{p.score}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default Scoreboard\n","import React from 'react'\nimport { Grid, Header, Button } from 'semantic-ui-react'\n\nimport Notification from './Notification'\nimport PlayAgain from './PlayAgain'\nimport Scoreboard from './Scoreboard'\n\nconst GameView = ({ notification, players, lostGame, clickGameButton, playAgain, leaveGame }) => {\n  if (lostGame) {\n    return <PlayAgain playAgain={playAgain} leaveGame={leaveGame} />\n  }\n\n  return (\n    <Grid textAlign='center' stackable style={{ minHeight: 'calc(100vh - 50px)' }}>\n      <Grid.Row columns={1}>\n        <Grid.Column textAlign='center' verticalAlign='bottom' style={{ paddingBottom: '3em' }}>\n          <Header\n            as='h1'\n            style={{\n              fontSize: '3em'\n            }}>\n            Press the Button!\n          </Header>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row style={{ paddingTop: '3em' }}>\n        <Grid.Column width={10} textAlign='center'>\n          <Button\n            data-cy='game-btn'\n            color='red'\n            className='game-btn'\n            onClick={clickGameButton}\n            autoFocus\n          />\n          <Notification notification={notification} />\n        </Grid.Column>\n        <Grid.Column\n          textAlign='center'\n          width={6}\n          style={{ paddingRight: '8em', paddingTop: '1em' }}>\n          <Scoreboard players={players} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\nexport default GameView\n","import React from 'react'\nimport { Button, Form, Grid, Header } from 'semantic-ui-react'\n\nconst NameForm = ({ enterGame, name, setName }) => {\n  const handleNameChange = event => {\n    setName(event.target.value)\n  }\n\n  return (\n    <Grid verticalAlign='middle' textAlign='center' style={{ height: 'calc(100vh - 50px)' }}>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' textAlign='center'>\n          What's your name?\n        </Header>\n        <Form size='large' onSubmit={enterGame}>\n          <Form.Field>\n            <Form.Input\n              type='text'\n              value={name}\n              onChange={handleNameChange}\n              required\n              autoFocus\n              className='name-input'\n              data-cy='name-input'></Form.Input>\n          </Form.Field>\n          <Button\n            type='submit'\n            fluid\n            size='large'\n            color='green'\n            className='join-btn'\n            data-cy='join-btn'>\n            Play!\n          </Button>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default NameForm\n","import React from 'react'\nimport { Container, Menu, Icon } from 'semantic-ui-react'\n\nconst Footer = () => {\n  return (\n    <Menu fixed='bottom' inverted secondary style={{ backgroundColor: '#666a86' }}>\n      <Container>\n        <Menu.Item header>\n          <Icon name='gavel' size='large' style={{ marginRight: '1.5em' }} />\n          Press the Button!\n        </Menu.Item>\n        <Menu.Item as='a' href='https://github.com/joonaspartanen/press-the-button'>\n          About\n        </Menu.Item>\n      </Container>\n    </Menu>\n  )\n}\n\nexport default Footer\n","import React, { useEffect, useState } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport './App.css'\nimport GameView from './components/GameView'\nimport NameForm from './components/NameForm'\nimport Footer from './components/Footer'\nimport io from 'socket.io-client'\n\nconst socket = io()\n\nconst App = () => {\n  const [players, setPlayers] = useState([])\n  const [notification, setNotification] = useState('Ready to play?')\n  const [user, setUser] = useState('')\n  const [name, setName] = useState('')\n  const [lostGame, setLostGame] = useState(false)\n\n  const enterGame = event => {\n    event.preventDefault()\n    socket.emit('newPlayer', name)\n    setUser(name)\n  }\n\n  const playAgain = () => {\n    socket.emit('playAgain')\n    setLostGame(false)\n    setNotification('Ready to play?')\n  }\n\n  const leaveGame = () => {\n    socket.emit('leaveGame')\n    setLostGame(false)\n    setNotification('Ready to play?')\n    setUser('')\n    setName('')\n  }\n\n  const clickGameButton = () => {\n    socket.emit('click')\n  }\n\n  useEffect(() => {\n    socket.on('gameState', data => {\n      setPlayers(data.players)\n    })\n    socket.on('lostGame', () => {\n      setLostGame(true)\n    })\n    socket.on('win', prize => {\n      setNotification(`You win ${prize} points!`)\n    })\n    socket.on('noWin', toNextPrize => {\n      setNotification(`The next prize is ${toNextPrize} clicks away!`)\n    })\n  }, [players, lostGame])\n\n  return (\n    <Container\n      style={{\n        backgroundColor: '#2a3950',\n        minHeight: '100vh'\n      }}>\n      {user ? (\n        <GameView\n          notification={notification}\n          players={players}\n          lostGame={lostGame}\n          clickGameButton={clickGameButton}\n          playAgain={playAgain}\n          leaveGame={leaveGame}\n        />\n      ) : (\n        <NameForm enterGame={enterGame} name={name} setName={setName} />\n      )}\n      <Footer />\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}