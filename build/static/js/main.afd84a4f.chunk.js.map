{"version":3,"sources":["components/Notification.js","components/PlayerList.js","components/PlayAgain.js","components/GameView.js","components/NameForm.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Notification","notification","Header","as","data-cy","style","color","height","marginBottom","PlayerList","players","Table","basic","inverted","unstackable","textAlign","Row","HeaderCell","Body","map","p","key","id","Cell","name","score","PlayAgain","socket","setLostGame","setNotification","setUser","Grid","verticalAlign","Column","paddingTop","paddingBottom","Button","onClick","emit","size","marginRight","GameView","lostGame","stackable","columns","fontSize","width","className","paddingRight","NameForm","useState","setName","maxWidth","Form","onSubmit","event","preventDefault","Field","Input","type","value","onChange","target","required","autoFocus","fluid","Footer","Menu","fixed","secondary","backgroundColor","Container","Item","header","Icon","href","io","App","setPlayers","user","useEffect","on","data","prize","toNextPrize","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.afd84a4f.chunk.js","sourcesContent":["import React from 'react'\nimport { Header } from 'semantic-ui-react'\n\nconst Notification = ({ notification }) => {\n  return (\n    <Header\n      as='h3'\n      data-cy='notification'\n      style={{ color: '#fff', height: '50px', marginBottom: '1em' }}\n    >\n      {notification}\n    </Header>\n  )\n}\n\nexport default Notification\n","import React from 'react'\nimport { Table } from 'semantic-ui-react'\n\nconst PlayerList = ({ players }) => {\n  return (\n    <Table basic='very' inverted unstackable textAlign='center'>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name</Table.HeaderCell>\n          <Table.HeaderCell>Score</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        {players.map(p => (\n          <Table.Row key={p.id}>\n            <Table.Cell>{p.name}</Table.Cell>\n            <Table.Cell>{p.score}</Table.Cell>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default PlayerList\n","import React from 'react'\n\nimport { Grid, Header, Button } from 'semantic-ui-react'\n\nconst PlayAgain = ({ socket, setLostGame, setNotification, setUser }) => {\n  const playAgain = () => {\n    socket.emit('playAgain')\n    setLostGame(false)\n    setNotification('Ready to play?')\n  }\n\n  const leaveGame = () => {\n    socket.emit('leaveGame')\n    setLostGame(false)\n    setNotification('Ready to play?')\n    setUser('')\n  }\n\n  return (\n    <Grid verticalAlign='middle' textAlign='center' style={{ height: '100vh' }}>\n      <Grid.Column>\n        <Header as='h1' style={{ color: '#fff', paddingTop: '1em' }}>\n          You lose!\n        </Header>\n        <Header as='h2' style={{ color: '#fff', paddingBottom: '1em' }}>\n          Do you want to play again?\n        </Header>\n        <Button\n          onClick={playAgain}\n          color='green'\n          size='huge'\n          style={{ marginRight: '1em' }}\n        >\n          Yes\n        </Button>\n        <Button onClick={leaveGame} color='red' size='huge'>\n          No\n        </Button>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default PlayAgain\n","import React from 'react'\nimport { Grid, Header, Button } from 'semantic-ui-react'\n\nimport Notification from './Notification'\nimport PlayerList from './PlayerList'\nimport PlayAgain from './PlayAgain'\n\nconst GameView = ({\n  notification,\n  setNotification,\n  players,\n  lostGame,\n  setLostGame,\n  setUser,\n  socket\n}) => {\n  const handleClick = () => {\n    socket.emit('click')\n  }\n\n  if (lostGame) {\n    return (\n      <PlayAgain\n        socket={socket}\n        setLostGame={setLostGame}\n        setNotification={setNotification}\n        setUser={setUser}\n      />\n    )\n  }\n  return (\n    <Grid textAlign='center' stackable>\n      <Grid.Row columns={1}>\n        <Grid.Column textAlign='center'>\n          <Header\n            as='h1'\n            style={{\n              color: '#fff',\n              fontSize: '300%',\n              paddingTop: '5vw',\n              marginBottom: '5vw'\n            }}\n          >\n            Press the Button!\n          </Header>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column width={10} textAlign='center'>\n          <Button\n            data-cy='game-btn'\n            color='red'\n            className='game-btn'\n            onClick={handleClick}\n          ></Button>\n          <Notification notification={notification} />\n        </Grid.Column>\n        <Grid.Column\n          textAlign='center'\n          width={6}\n          style={{ paddingRight: '8em' }}\n        >\n          <PlayerList players={players} />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  )\n}\n\nexport default GameView\n","import React, { useState } from 'react'\nimport { Button, Form, Grid, Header } from 'semantic-ui-react'\n\nconst NameForm = ({ setUser, socket }) => {\n  const [name, setName] = useState('')\n\n  const handleNameChange = event => {\n    setName(event.target.value)\n  }\n\n  const enterGame = event => {\n    event.preventDefault()\n    socket.emit('newPlayer', name)\n    setUser(name)\n  }\n\n  return (\n    <Grid\n      verticalAlign='middle'\n      textAlign='center'\n      style={{ height: 'calc(100vh - 50px)' }}\n    >\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' style={{ color: '#fff' }} textAlign='center'>\n          What's your name?\n        </Header>\n        <Form size='large' onSubmit={enterGame}>\n          <Form.Field>\n            <Form.Input\n              data-cy='name-form'\n              type='text'\n              value={name}\n              onChange={handleNameChange}\n              required\n              autoFocus\n            ></Form.Input>\n          </Form.Field>\n          <Button\n            type='submit'\n            fluid\n            size='large'\n            color='green'\n            className='join-btn'\n            data-cy='join-btn'\n          >\n            Play!\n          </Button>\n        </Form>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nexport default NameForm\n","import React from 'react'\nimport { Container, Menu, Icon } from 'semantic-ui-react'\n\nconst Footer = () => {\n  return (\n    <Menu\n      fixed='bottom'\n      inverted\n      secondary\n      style={{ backgroundColor: '#666a86' }}\n    >\n      <Container>\n        <Menu.Item header>\n          <Icon name='gavel' size='big' style={{ marginRight: '1.5em' }} />\n          Press the Button\n        </Menu.Item>\n        <Menu.Item\n          as='a'\n          href='https://github.com/joonaspartanen/press-the-button'\n        >\n          About\n        </Menu.Item>\n      </Container>\n    </Menu>\n  )\n}\n\nexport default Footer\n","import React, { useEffect, useState } from 'react'\nimport { Container } from 'semantic-ui-react'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport GameView from './components/GameView'\nimport NameForm from './components/NameForm'\nimport Footer from './components/Footer'\nimport io from 'socket.io-client'\n\nconst socket = io()\n\nconst App = () => {\n  const [players, setPlayers] = useState([])\n  const [notification, setNotification] = useState('Ready to play?')\n  const [user, setUser] = useState('')\n  const [lostGame, setLostGame] = useState(false)\n\n  useEffect(() => {\n    socket.on('gameState', data => {\n      setPlayers(data.players)\n    })\n    socket.on('lostGame', () => {\n      setLostGame(true)\n    })\n    socket.on('win', prize => {\n      setNotification(`You win ${prize} points!`)\n    })\n    socket.on('noWin', toNextPrize => {\n      setNotification(`The next prize is ${toNextPrize} clicks away!`)\n    })\n  }, [players, lostGame])\n\n  return (\n    <Container\n      style={{\n        backgroundColor: '#2a3950',\n        minHeight: '100vh'\n      }}\n    >\n      {user ? (\n        <GameView\n          notification={notification}\n          setNotification={setNotification}\n          players={players}\n          lostGame={lostGame}\n          setLostGame={setLostGame}\n          setUser={setUser}\n          socket={socket}\n        />\n      ) : (\n        <NameForm setUser={setUser} socket={socket} />\n      )}\n      <Footer></Footer>\n    </Container>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}