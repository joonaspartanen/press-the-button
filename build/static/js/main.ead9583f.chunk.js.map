{"version":3,"sources":["components/Notification.js","components/PlayerList.js","components/GameView.js","components/NameForm.js","App.js","serviceWorker.js","index.js"],"names":["Notification","notification","style","marginBottom","PlayerList","players","map","p","key","id","color","name","score","GameView","lostGame","setLostGame","setUser","socket","Container","fluid","textAlign","Row","className","onClick","emit","marginTop","paddingTop","Col","md","console","log","size","NameForm","useState","setName","Form","onSubmit","event","preventDefault","Group","Control","type","value","onChange","target","required","autoFocus","io","App","setPlayers","setNotification","user","useEffect","on","data","prize","toNextPrize","paddingLeft","paddingRight","backgroundColor","height","Navbar","bg","variant","Brand","href","Nav","Item","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SASeA,EAPM,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACtB,MAAqB,KAAjBA,EACK,8BAEF,yBAAKC,MAAO,CAAEC,aAAc,QAAUF,ICMhCG,EATI,SAAC,GAAD,SAAGC,QACZC,KAAI,SAAAC,GACV,OACE,wBAAIC,IAAKD,EAAEE,GAAIP,MAAO,CAAEQ,MAAO,SAC5BH,EAAEI,KADL,QACgBJ,EAAEK,MADlB,eCoESC,EAnEE,SAAC,GAOX,IANLZ,EAMI,EANJA,aACAI,EAKI,EALJA,QACAS,EAII,EAJJA,SACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,QACAC,EACI,EADJA,OAkBA,OAAIH,EAEA,kBAACI,EAAA,EAAD,CAAWC,MAAO,QAChB,wBAAIjB,MAAO,CAAEkB,UAAW,WAAxB,aACA,wBAAIlB,MAAO,CAAEkB,UAAW,WAAxB,8BACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,0BACb,4BAAQA,UAAU,aAAaC,QAjBrB,WAChBN,EAAOO,KAAK,aACZT,GAAY,KAeN,OAGA,4BAAQO,UAAU,aAAaC,QAfrB,WAChBN,EAAOO,KAAK,aACZT,GAAY,GACZC,EAAQ,MAYF,QAQN,kBAACE,EAAA,EAAD,CAAWC,MAAO,QAChB,wBAAIjB,MAAO,CAAEQ,MAAO,OAAQe,UAAW,MAAOL,UAAW,WAAzD,qBAGA,kBAACC,EAAA,EAAD,CAAKC,UAAU,yBAAyBpB,MAAO,CAAEwB,WAAY,QAC3D,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGN,UAAU,eACpB,kBAAC,EAAD,CAAcrB,aAAcA,KAE9B,kBAAC0B,EAAA,EAAD,CAAKC,GAAI,EAAGN,UAAU,eACpB,4BAAQA,UAAU,WAAWC,QA1CjB,WAClBM,QAAQC,IAAI,SACZb,EAAOO,KAAK,WAyCJ,kBAAC,IAAD,CAAQO,KAAM,UAGlB,kBAACJ,EAAA,EAAD,CAAKC,GAAI,EAAGN,UAAU,eACP,OAAZjB,GACC,wBAAIiB,UAAU,iBACZ,+CACA,kBAAC,EAAD,CAAYjB,QAASA,S,QCzBpB2B,EArCE,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAChBgB,mBAAS,IADO,mBACjCtB,EADiC,KAC3BuB,EAD2B,KAcxC,OACE,kBAAChB,EAAA,EAAD,CAAWI,UAAU,eACnB,wBAAIpB,MAAO,CAAEQ,MAAO,OAAQe,UAAW,MAAOtB,aAAc,QAA5D,qBAGA,kBAACgC,EAAA,EAAD,CAAMC,SAXQ,SAAAC,GAChBA,EAAMC,iBACNrB,EAAOO,KAAK,YAAab,GACzBK,EAAQL,KASJ,kBAACwB,EAAA,EAAKI,MAAN,KACE,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,MAAO/B,EACPgC,SArBe,SAAAN,GACvBH,EAAQG,EAAMO,OAAOF,OACrBb,QAAQC,IAAInB,IAoBJkC,UAAQ,EACRC,WAAS,IAEX,4BAAQxB,UAAU,aAAamB,KAAK,UAApC,a,QCxBJxB,E,MAAS8B,GAAG,yBAkEHC,EAhEH,WAAO,IAAD,EACcf,mBAAS,IADvB,mBACT5B,EADS,KACA4C,EADA,OAEwBhB,mBAAS,IAFjC,mBAEThC,EAFS,KAEKiD,EAFL,OAGQjB,mBAAS,IAHjB,mBAGTkB,EAHS,KAGHnC,EAHG,OAIgBiB,oBAAS,GAJzB,mBAITnB,EAJS,KAICC,EAJD,KAwBhB,OAlBAqC,qBAAU,WACRnC,EAAOoC,GAAG,aAAa,SAAAC,GACrBzB,QAAQC,IAAIwB,GACZL,EAAWK,EAAKjD,SAChBwB,QAAQC,IAAIhB,MAEdG,EAAOoC,GAAG,YAAY,WACpBtC,GAAY,MAEdE,EAAOoC,GAAG,OAAO,SAAAE,GACfL,EAAgB,WAAD,OAAYK,EAAZ,aACf1B,QAAQC,IAAR,oBAAyByB,OAE3BtC,EAAOoC,GAAG,SAAS,SAAAG,GACjBN,EAAgB,qBAAD,OAAsBM,EAAtB,uBAEhB,CAACnD,EAASS,IAGX,6BACE,kBAACI,EAAA,EAAD,CACEC,MAAO,OACPjB,MAAO,CACLuD,YAAa,EACbC,aAAc,EACdC,gBAAiB,UACjBC,OAAQ,UAGV,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,oBACA,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,sDAAf,YAMLd,EACC,kBAAC,EAAD,CACElD,aAAcA,EACdI,QAASA,EACTS,SAAUA,EACVC,YAAaA,EACbC,QAASA,EACTC,OAAQA,IAGV,kBAAC,EAAD,CAAUD,QAASA,EAASC,OAAQA,OCpD1BoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ead9583f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Notification = ({ notification }) => {\n  if (notification === '') {\n    return <div></div>\n  }\n  return <div style={{ marginBottom: '1em' }}>{notification}</div>\n}\n\nexport default Notification","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\n\nconst PlayerList = ({ players }) =>\n  players.map(p => {\n    return (\n      <li key={p.id} style={{ color: '#000' }}>\n        {p.name} has {p.score} points\n      </li>\n    )\n  })\n\nexport default PlayerList\n","import React from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport { Hammer } from 'react-bootstrap-icons'\n\nimport Notification from './Notification'\nimport PlayerList from './PlayerList'\n\nconst GameView = ({\n  notification,\n  players,\n  lostGame,\n  setLostGame,\n  setUser,\n  socket\n}) => {\n  const handleClick = () => {\n    console.log('click')\n    socket.emit('click')\n  }\n\n  const playAgain = () => {\n    socket.emit('playAgain')\n    setLostGame(false)\n  }\n\n  const leaveGame = () => {\n    socket.emit('leaveGame')\n    setLostGame(false)\n    setUser('')\n  }\n\n  if (lostGame) {\n    return (\n      <Container fluid={'true'}>\n        <h1 style={{ textAlign: 'center' }}>You lose!</h1>\n        <h2 style={{ textAlign: 'center' }}>Do you want to play again?</h2>\n        <Row className=\"justify-content-center\">\n          <button className=\"select-btn\" onClick={playAgain}>\n            Yes\n          </button>\n          <button className=\"select-btn\" onClick={leaveGame}>\n            No\n          </button>\n        </Row>\n      </Container>\n    )\n  }\n  return (\n    <Container fluid={'true'}>\n      <h1 style={{ color: '#000', marginTop: '1em', textAlign: 'center' }}>\n        Press the Button!\n      </h1>\n      <Row className=\"justify-content-center\" style={{ paddingTop: '2em' }}>\n        <Col md={4} className=\"text-center\">\n          <Notification notification={notification}></Notification>\n        </Col>\n        <Col md={4} className=\"text-center\">\n          <button className=\"game-btn\" onClick={handleClick}>\n            <Hammer size={'6em'}></Hammer>\n          </button>\n        </Col>\n        <Col md={4} className=\"text-center\">\n          {players !== null && (\n            <ul className=\"list-unstyled\">\n              <h3>Current players</h3>\n              <PlayerList players={players}></PlayerList>\n            </ul>\n          )}\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default GameView\n","import React, { useState } from 'react'\nimport { Container, Form, Row, Col } from 'react-bootstrap'\n\nconst NameForm = ({ setUser, socket }) => {\n  const [name, setName] = useState('')\n\n  const handleNameChange = event => {\n    setName(event.target.value)\n    console.log(name)\n  }\n\n  const enterGame = event => {\n    event.preventDefault()\n    socket.emit('newPlayer', name)\n    setUser(name)\n  }\n\n  return (\n    <Container className=\"text-center\">\n      <h2 style={{ color: '#000', marginTop: '2em', marginBottom: '1em' }}>\n        What's your name?\n      </h2>\n      <Form onSubmit={enterGame}>\n        <Form.Group>\n          <Form.Control\n            type=\"text\"\n            value={name}\n            onChange={handleNameChange}\n            required\n            autoFocus\n          ></Form.Control>\n          <button className=\"select-btn\" type=\"submit\">\n            Play!\n          </button>\n        </Form.Group>\n      </Form>\n    </Container>\n  )\n}\n\nexport default NameForm\n","import React, { useEffect, useState } from 'react'\nimport { Container, Navbar, Nav, Row, Col, Form, Button } from 'react-bootstrap'\nimport './App.css'\nimport GameView from './components/GameView'\nimport NameForm from './components/NameForm'\nimport io from 'socket.io-client'\n\nconst socket = io('http://localhost:5000')\n\nconst App = () => {\n  const [players, setPlayers] = useState([])\n  const [notification, setNotification] = useState('')\n  const [user, setUser] = useState('')\n  const [lostGame, setLostGame] = useState(false)\n\n  useEffect(() => {\n    socket.on('gameState', data => {\n      console.log(data)\n      setPlayers(data.players)\n      console.log(lostGame)\n    })\n    socket.on('lostGame', () => {\n      setLostGame(true)\n    })\n    socket.on('win', prize => {\n      setNotification(`You win ${prize} points!`)\n      console.log(`new score ${prize}`)\n    })\n    socket.on('noWin', toNextPrize => {\n      setNotification(`The next prize is ${toNextPrize} clicks away!`)\n    })\n  }, [players, lostGame])\n\n  return (\n    <div>\n      <Container\n        fluid={'true'}\n        style={{\n          paddingLeft: 0,\n          paddingRight: 0,\n          backgroundColor: '#f5f8fa',\n          height: '100vh'\n        }}\n      >\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#\">Press the Button</Navbar.Brand>\n          <Nav>\n            <Nav.Item>\n              <Nav.Link href=\"https://github.com/joonaspartanen/press-the-button\">\n                About\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </Navbar>\n        {user ? (\n          <GameView\n            notification={notification}\n            players={players}\n            lostGame={lostGame}\n            setLostGame={setLostGame}\n            setUser={setUser}\n            socket={socket}\n          ></GameView>\n        ) : (\n          <NameForm setUser={setUser} socket={socket}></NameForm>\n        )}\n      </Container>\n    </div>\n  )\n}\n\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}